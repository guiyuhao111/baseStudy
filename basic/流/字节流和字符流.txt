参考 http://blog.csdn.net/lyb1832567496/article/details/52766152
http://blog.csdn.net/axi295309066/article/details/52820203
1.流的概念:数据的传输被抽象地称为流
2.流的分类:字节流和字符流
IO流 字节流方法与原理介绍:	
	---2.1:FileInputStream和FileOutputStream均是调用操作系统的方法(native)
		---2.1.1:read():从流中读取一个字节并且将此字节转化为0-255的int型数据;
		---2.1.2:write(byte []):将byte数组写入流中
		---2.1.3:read(byte[]):从流中读取byte字节数组长度的数据返回-1读取完成
	---2.2:BufferedInputStream:从流中读取缓冲数组长度的数据放到缓冲数组中,然后我们再从缓冲中复制数据
		BufferedOutputStream:向流中写入数据时先将数据复制到缓冲数组中,当缓冲数组剩余的长度不足我们要传输的数据长度时在将缓冲数组数据刷新(传输)到流中去

public synchronized void write(byte b[], int off, int len) throws IOException {
	//当我们要传输的长度大于缓冲区的长度时刷新缓冲区直接将我们的数据输出到流里面去
        if (len >= buf.length) {
            flushBuffer();
            out.write(b, off, len);
            return;
        }
	//当剩余长度不足以盛放我们要传输的长度时先刷新缓冲区
        if (len > buf.length - count) {
            flushBuffer();
        }
	//将我们要写入的数据复制到缓冲区
        System.arraycopy(b, off, buf, count, len);
        count += len;
}
	mark:低级流并不一定比高级流效率高,高级流也是依靠低级流传输数据,当低级流每次读写的数据长度和高级流缓冲区的长度相等时因为不经过缓冲区的缘故甚至效率还要高于高级流
	BufferedOutputStream写入数据完自动刷新缓冲区.无需手动调flush方法

3.字符流介绍:字符流实际并不是直接读取数据而是先看数据编码再读取数据相当于 字节流+编码 字符流基于字节流
	字符流利用字节流传输时会创建默认大小时8*1024字节的缓冲区.而且字符流InputStreamWriter需要手动刷新缓冲区,PrintWriter需要手动指定是否自动刷新缓冲区
	缓冲字符流相对于字符流来说增加了增加了一个可以缓冲字符的缓冲区,在将字符转化为字节数组时避免多次调用编码器和解码器
	---3.1:InputStreamReader InputStreamWriter
		3.1.1: read(char[],off,len):读取一定数据长度到char数组读取完返回-1
		3.1.2: writer():;
	---3.2:BufferedReader BufferedWriter
		3.2.1: read(char[],off,len):先读取一定数据到缓冲区,然后从缓冲区赋值数据
		3.2.2: writer():;
4.字节流和字符流的区别:
4.1字节流是以字节为单位的，字符流是以字符为单位的,因为读取数据最基本的・还是用字节流，但是jvm会将2个字节转换为unicode字符
4.2字节流读取数据不经过缓冲区，字符流读取数据是一定经过缓冲区的
	


